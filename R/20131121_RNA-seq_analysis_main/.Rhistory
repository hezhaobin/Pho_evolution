plotMA
plotMA(res[[1]])
sc.sc4.80 <- as.data.frame( results( dds[[1]] ) )
dds <- list( sc.sc4.80 = PairwiseDE2( sc.sense, sc.info$Genotype, "pho80.pho4", "pho80" ) )
sc.sc4.80 <- as.data.frame( results( dds[[1]] ) )
View(sc.sc4.80)
tt <- results( dds[[1]] )
str(tt)
sc.sc4.80 <- results(dds[[1]])
mcols(sc.sc4.80)
res <- list( sc.sc4.80 = results(dds[[1]]) )
sig <- list( sc.sc4.80 = sigGene( res$sc.sc4.80, baseMean=700 ) )
sum(sig[[1]])
# Function for calculating DE genes given the data, design
PairwiseDE <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))) )
cds <- newCountDataSet( subTable, conditions )
cds <- estimateSizeFactors( cds )
cds <- estimateDispersions( cds )
res = nbinomTest( cds, cond.A, cond.B )
res1 <- res[ !is.na(res$padj), ]
return( res )
}
# Function to report significant genes at a given fdr and log2FoldChange threshold
sigGene <- function( res, fdr=0.05, log2FoldChange=1, direction="up", baseMean=0 ) {
cat( paste("sigGene --fdr=", fdr, " --foldchange=", 2^log2FoldChange, " --direction=", direction, " --baseMean=",baseMean, sep="", collapse="") )
if( direction != "up" & direction != "down" ){
list = rep(FALSE, nrow(res))
}
else if( direction == "up"){
list = res$padj < fdr & res$log2FoldChange > log2FoldChange & res$baseMean > baseMean
}
else if( direction == "down"){
list = res$padj < fdr & res$log2FoldChange < -log2FoldChange & res$baseMean > baseMean
}
list = replace(list, is.na(list), FALSE)
return( list )
}
# Use DESeq2 to call significantly DE genes
PairwiseDE2 <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))), levels=c(cond.A,cond.B) )
colData <- DataFrame( condition = conditions )
dds <- DESeqDataSetFromMatrix( countData = subTable, colData = colData, design = ~condition)
dds <- DESeq( dds )
return( dds )
}
sig <- list( sc.sc4.80 = sigGene( res$sc.sc4.80, baseMean=700 ) )
sum(sig[[1]])
sig <- list( sc.sc4.80 = sigGene( res$sc.sc4.80 ) )
sum(sig[[1]])
?att
?attr
# Function for calculating DE genes given the data, design
PairwiseDE <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))) )
cds <- newCountDataSet( subTable, conditions )
cds <- estimateSizeFactors( cds )
cds <- estimateDispersions( cds )
res = nbinomTest( cds, cond.A, cond.B )
res1 <- res[ !is.na(res$padj), ]
return( res )
}
# Function to report significant genes at a given fdr and log2FoldChange threshold
sigGene <- function( res, fdr=0.05, log2FoldChange=1, direction="up", baseMean=0 ) {
cat( paste("sigGene --fdr=", fdr, " --foldchange=", 2^log2FoldChange, " --direction=", direction, " --baseMean=",baseMean, sep="", collapse="") )
if( direction != "up" & direction != "down" ){
list = rep(FALSE, nrow(res))
}
else if( direction == "up"){
list = res$padj < fdr & res$log2FoldChange > log2FoldChange & res$baseMean > baseMean
}
else if( direction == "down"){
list = res$padj < fdr & res$log2FoldChange < -log2FoldChange & res$baseMean > baseMean
}
list = replace(list, is.na(list), FALSE)
attributes(list) <- list(fdr, log2FoldChange, direction, baseMean)
return( list )
}
# Use DESeq2 to call significantly DE genes
PairwiseDE2 <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))), levels=c(cond.A,cond.B) )
colData <- DataFrame( condition = conditions )
dds <- DESeqDataSetFromMatrix( countData = subTable, colData = colData, design = ~condition)
dds <- DESeq( dds )
return( dds )
}
sig <- list( sc.sc4.80 = sigGene( res$sc.sc4.80 ) )
# Function for calculating DE genes given the data, design
PairwiseDE <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))) )
cds <- newCountDataSet( subTable, conditions )
cds <- estimateSizeFactors( cds )
cds <- estimateDispersions( cds )
res = nbinomTest( cds, cond.A, cond.B )
res1 <- res[ !is.na(res$padj), ]
return( res )
}
# Function to report significant genes at a given fdr and log2FoldChange threshold
sigGene <- function( res, fdr=0.05, log2FoldChange=1, direction="up", baseMean=0 ) {
cat( paste("sigGene --fdr=", fdr, " --foldchange=", 2^log2FoldChange, " --direction=", direction, " --baseMean=",baseMean, sep="", collapse="") )
if( direction != "up" & direction != "down" ){
list = rep(FALSE, nrow(res))
}
else if( direction == "up"){
list = res$padj < fdr & res$log2FoldChange > log2FoldChange & res$baseMean > baseMean
}
else if( direction == "down"){
list = res$padj < fdr & res$log2FoldChange < -log2FoldChange & res$baseMean > baseMean
}
list = replace(list, is.na(list), FALSE)
attributes(list) <- list("fdr"=fdr, "log2Foldchange"=log2FoldChange, "direction"=direction, "baseMean"=baseMean)
return( list )
}
# Use DESeq2 to call significantly DE genes
PairwiseDE2 <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))), levels=c(cond.A,cond.B) )
colData <- DataFrame( condition = conditions )
dds <- DESeqDataSetFromMatrix( countData = subTable, colData = colData, design = ~condition)
dds <- DESeq( dds )
return( dds )
}
sig <- list( sc.sc4.80 = sigGene( res$sc.sc4.80 ) )
attributes(sig[[1]])
# Function for calculating DE genes given the data, design
PairwiseDE <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))) )
cds <- newCountDataSet( subTable, conditions )
cds <- estimateSizeFactors( cds )
cds <- estimateDispersions( cds )
res = nbinomTest( cds, cond.A, cond.B )
res1 <- res[ !is.na(res$padj), ]
return( res )
}
# Function to report significant genes at a given fdr and log2FoldChange threshold
sigGene <- function( res, fdr=0.05, log2FoldChange=1, direction="up", baseMean=0 ) {
par <- paste("sigGene --fdr=", fdr, " --foldchange=", 2^log2FoldChange, " --direction=", direction, " --baseMean=",baseMean, sep="", collapse="")
if( direction != "up" & direction != "down" ){
list = rep(FALSE, nrow(res))
}
else if( direction == "up"){
list = res$padj < fdr & res$log2FoldChange > log2FoldChange & res$baseMean > baseMean
}
else if( direction == "down"){
list = res$padj < fdr & res$log2FoldChange < -log2FoldChange & res$baseMean > baseMean
}
list = replace(list, is.na(list), FALSE)
attr(list, "par") <- par
cat( par )
return( list )
}
# Use DESeq2 to call significantly DE genes
PairwiseDE2 <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))), levels=c(cond.A,cond.B) )
colData <- DataFrame( condition = conditions )
dds <- DESeqDataSetFromMatrix( countData = subTable, colData = colData, design = ~condition)
dds <- DESeq( dds )
return( dds )
}
sig <- list( sc.sc4.80 = sigGene( res$sc.sc4.80 ) )
attributes(sig[[1]])
names(attributes(sig[[1]]))
sig[[1]]["YML123C"]
sig$sc.sc4.noPi <- sigGene( sc.sc4.noPi )
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
sessionInfo()
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
biocLite("BiocUpgrade")
search()
detach()
detach(name="package:DESeq2")
require(DESeq2)
detach(name="package:DESeq2")
library(DESeq2)
library(DESeq2)
setwd("~/Documents/work/Pho/Result/RNA-seq/main")
# Scer
sc.sense <- read.csv("ScerRNAseq_sense.csv",row.names=1)
# sc.anti <- read.csv("ScerRNAseq_anti.csv",row.names=1)
sc.info <- read.table("ScerRNAseq_sample_info.txt",col.names=c("Sample","Genotype", "Size"),as.is=TRUE)
sc.genes <- rownames( sc.sense )
# Cgla
cg.sense <- read.csv("CglaRNAseq_sense.csv",row.names=1)
# cg.anti <- read.csv("CglaRNAseq_anti.csv",row.names=1)
cg.info <- read.table("CglaRNAseq_sample_info.txt",col.names=c("Sample","Genotype","Size"),as.is=TRUE)
cg.genes <- rownames( cg.sense )
# misc annotation stuff
# convert Cgla genes to orthologs in Scer, based on orthogroup assignment from Aviv's database
# note that for genes with more than one potential orthologs, the first one in the list is used
cg.sc.ortholog <- read.table("Cgla-Scer-orthologs.txt",na.string="NONE",fill=TRUE,as.is=TRUE)
cgToSc <- cg.sc.ortholog$V2; names(cgToSc) <- cg.sc.ortholog$V1
sgdName <- read.table("sgdToName.txt",as.is=TRUE)
sgdToName <- sgdName$V2; names(sgdToName) <- sgdName$V1
nameToSgd <- sgdName$V1; names(nameToSgd) <- sgdName$V2
xu.genes <- c("PHO8","VTC3","SPL2","PHO81","PHO86","PHO5","PHO11","PHO84","PHO89","PHM6","PHO12","GIT1","VTC1","VTC4","CTF19","YAR070C","ENA2","VTC2","ENA1","GDE1","PHM8","VIP1","CBF1","DDP1","YJL119C","HOR2","YNL217W")
Xu.genes <- nameToSgd[ xu.genes ]
all.80 <-c("YAL005C","YAR068W","YAR070C","YAR071W","YBR072W","YBR093C","YBR157C","YBR169C","YBR296C","YCL040W","YCR098C","YDL204W","YDR005C","YDR019C","YDR039C","YDR040C","YDR270W","YDR281C","YDR481C","YDR516C","YEL011W","YEL065W","YER037W","YER062C","YER072W","YFL004W","YFR053C","YGR233C","YHL035C","YHL040C","YHL047C","YHR136C","YHR138C","YHR214W-A","YHR215W","YIL074C","YIL169C","YJL012C","YJL117W","YJL119C","YJR060W","YKL001C","YKR034W","YKR080W","YLL026W","YLR109W","YLR136C","YLR142W","YLR214W","YLR303W","YLR327C","YLR410W","YLR438W","YML123C","YML128C","YMR011W","YMR058W","YMR105C","YMR173W","YMR173W-A","YMR195W","YMR251W","YMR251W-A","YNL217W","YNR069C","YOL086C","YOL155C","YOL158C","YOR163W","YOR173W","YOR344C","YOR347C","YOR382W","YOR383C","YPL018W","YPL019C","YPL054W","YPL110C","YPR167C")
# Function for calculating DE genes given the data, design
PairwiseDE <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))) )
cds <- newCountDataSet( subTable, conditions )
cds <- estimateSizeFactors( cds )
cds <- estimateDispersions( cds )
res = nbinomTest( cds, cond.A, cond.B )
res1 <- res[ !is.na(res$padj), ]
return( res )
}
# Function to report significant genes at a given fdr and log2FoldChange threshold
sigGene <- function( res, fdr=0.05, log2FoldChange=1, direction="up", baseMean=0 ) {
par <- paste("sigGene --fdr=", fdr, " --foldchange=", 2^log2FoldChange, " --direction=", direction, " --baseMean=",baseMean, sep="", collapse="")
if( direction != "up" & direction != "down" ){
list = rep(FALSE, nrow(res))
}
else if( direction == "up"){
list = res$padj < fdr & res$log2FoldChange > log2FoldChange & res$baseMean > baseMean
}
else if( direction == "down"){
list = res$padj < fdr & res$log2FoldChange < -log2FoldChange & res$baseMean > baseMean
}
list = replace(list, is.na(list), FALSE)
attr(list, "par") <- par
cat( par )
return( list )
}
# Use DESeq2 to call significantly DE genes
PairwiseDE2 <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))), levels=c(cond.A,cond.B) )
colData <- DataFrame( condition = conditions )
dds <- DESeqDataSetFromMatrix( countData = subTable, colData = colData, design = ~condition)
dds <- DESeq( dds )
return( dds )
}
dds <- list( sc.sc4.80 = PairwiseDE2( sc.sense, sc.info$Genotype, "pho80.pho4", "pho80" ) )
res <- list( sc.sc4.80 = results(dds[[1]]) )
attr(res[[1]],"filterThreshold")
names(attributes(res[[1]]))
sessionInfo
sessionInfo()
?results
sessionInfo()
?results
library(DESeq2)
?results
res <- list( sc.sc4.80 = results(dds[[1]]) )
dds <- list( sc.sc4.80 = PairwiseDE2( sc.sense, sc.info$Genotype, "pho80.pho4", "pho80" ) )
plotMA(dds[[1]])
res <- list( sc.sc4.80 = results(dds[[1]]) )
sig <- list( sc.sc4.80 = sigGene( res$sc.sc4.80 ) )
attr(res[[1]], "filterThreshold")
sum(sig[[1]])
head(res[[1]])
head(res[[1]][order(res[[1]]$padj),])
dds$sc.sc4.noPi <- PairwiseDE2( sc.sense, sc.info$Genotype, "wt.highPi", "wt.lowPi")
res$sc.sc4.noPi <- results(dds[[2]])
sig$sc.sc4.noPi <- sigGene( sc.sc4.noPi )
sig$sc.sc4.noPi <- sigGene(res[[2]])
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
plotMA( dds[[2]] )
attr(dds[[2]],"filter")
attr(dds[[2]],"filterThreshold")
attr(res[[2]],"filterThreshold")
sig <- list( sc.sc4.80 = sigGene(res$sc.sc4.80,baseMean=100) )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
sig <- list( sc.sc4.80 = sigGene(res$sc.sc4.80,baseMean=150) )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=150)
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
print( addmargins(comp[[1]]) ) # print overlaps
gene.list <- list( sc.pho80_noPi = sgdToName[ sc.genes[ sig$sc.sc4.noPi & sig$sc.sc4.80 ] ],
sc.noPi_Xu80 = sgdToName[ intersect(all.80, sc.genes[sig$sc.sc4.noPi]) ] )
sapply(gene.list,as.character)
sapply(gene.list,as.character,sort)
dds <- list( sc.sc4.no80 = PairwiseDE2( sc.sense, sc.info$Genotype, "wt.highPi", "pho80" ) )
res <- list( sc.sc4.no80 = results(dds[[1]]) )
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.80,baseMean=100) )
dds$sc.sc4.noPi <- PairwiseDE2( sc.sense, sc.info$Genotype, "wt.highPi", "wt.lowPi")
res$sc.sc4.noPi <- results(dds[[2]])
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
head(res[[1]](order(res[[1]]$padj)))
head(res[[1]](order(res[[1]]$padj,)))
head(res[[1]][order(res[[1]]),])
res[[1]]
head(res[[1]][order(res[[1]]$padj),])
res <- list( sc.sc4.no80 = results(dds[[1]]) ); res[[1]] <- res[[1]] [ order(res[[1]]$padj), ]
res[[1]]
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
res$sc.sc4.noPi <- results(dds[[2]])
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
plotMA( dds[[1]] )
res[1][1:20,]
res$sc.sc4.no80[1:20,]
res$sc.sc4.no80["YML123C",]
res$sc.sc4.noPi <- results(dds[[2]]); res[[2]] <- res[[2]] [ order(res[[2]]$padj), ]
res$sc.sc4.noPi["YML123C",]
View(sc.info)
sc.sense["YML123C",c("A1","A2","X1","X2")]
sc.sense["YML123C",c("A1","A2","X1","X2","B1","B2")]
sc.sense["YML123C",c("A1","A2","X1","X2","X3","X4")]
sum(sig[[1]])
sum(sig[[2]])
sum(sig$sc.sc4.no80)
plotMA(sig$sc.sc4.no80,main="No pho80")
plotMA(sig$sc.sc4.no80,title="no pho80")
plotMA(dds$sc.sc4.no80,main="No pho80")
plotMA(dds$sc.sc4.noPi,main="No Pi")
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
print( addmargins(comp[[1]]) ) # print overlaps
dds <- list( sc.sc4.no80 = PairwiseDE2( sc.sense, sc.info$Genotype, "wt.highPi", "pho80" ) )
res <- list( sc.sc4.no80 = results(dds[[1]]) ); res[[1]] <- res[[1]] [ order(res[[1]]$padj), ]
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
dds$sc.sc4.noPi <- PairwiseDE2( sc.sense, sc.info$Genotype, "wt.highPi", "wt.lowPi")
res$sc.sc4.noPi <- results(dds[[2]]); res[[2]] <- res[[2]] [ order(res[[2]]$padj), ]
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
gene.list <- list( sc.no80_noPi = sgdToName[ sc.genes[ sig$sc.sc4.noPi & sig$sc.sc4.no80 ] ],
sc.noPi_Xu80 = sgdToName[ intersect(all.80, sc.genes[sig$sc.sc4.noPi]) ] )
?as.character
?sapply
sapply(gene.list, as.character)
sum(intersect(all.80, sc.genes[sig$sc.sc4.noPi]))
summary(intersect(all.80, sc.genes[sig$sc.sc4.noPi]))
length(intersect(all.80, sc.genes[sig$sc.sc4.noPi]))
intersect(all.80, sc.genes[sig$sc.sc4.noPi])
sig$sc.sc4.noPi["YML123C",]
class(sig[[2]])
names(attributes(sig[[1]]))
res[[2]]["YML123C",]
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
attributes(sig[[2]])
tmp = sigGene(res[[2]],baseMean=100)
names(attributes(tmp))
sum(tmp)
"YML123C" %in% sc.genes[tmp]
debug(sigGene)
tmp = sigGene(res[[2]],baseMean=100)
fdr
res["YML123C",]
log2FoldChange
which(rownames(res)=="YML123C")
res[3,]
Q
res <- list( sc.sc4.no80 = results(dds[[1]]) )
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
res$sc.sc4.noPi <- results(dds[[2]])
Q
undebug(sigGene)
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
res$sc.sc4.noPi <- results(dds[[2]])
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
gene.list <- list( sc.no80_noPi = sgdToName[ sc.genes[ sig$sc.sc4.noPi & sig$sc.sc4.no80 ] ],
sc.noPi_Xu80 = sgdToName[ intersect(all.80, sc.genes[sig$sc.sc4.noPi]) ] )
cat( "Genes defined by Xu and found in starvation conditions ...")
sapply(gene.list, as.character)
?merge
as.data.frame(LETTERS[1:10])
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both","A only","B only"), len, sep=":", collapse=" "))
return(res)
}
tmp <- compList( sgdToName[sc.genes[sig[[2]]]], sgdToName[sc.genes[sig[[2]]]])
tmp <- compList( sgdToName[sc.genes[sig[[2]]]], sgdToName[sc.genes[sig[[1]]]])
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both","A only","B only"), len, sep=":", collapse="\n"))
return(res)
}
compList <- function(listA, listB){
}
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both","A only","B only"), len, sep=":", collapse="\n"))
return(res)
}
tmp <- compList( sgdToName[sc.genes[sig[[2]]]], sgdToName[sc.genes[sig[[1]]]])
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
return(res)
}
tmp
sort(tmp[1])
sort(tmp[[1]])
intersect(sgdToName[all.80], tmp[[2]])
intersect(sgdToName[all.80], tmp[[3]])
gene <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ] )
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
genelist <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
genelist$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
tmp = compList(gene[[1]],gene[[2]])
install.packages("vennDiagram")
install.packages("VennDiagram")
require(VennDiagram)
help(package="VennDiagram")
library(help="VennDiagram")
?venn.diagram
?draw.pairwise.venn
?intersect
tmp = compList(all.80, gene$sc.sc4.noPi)
tmp = compList(all.80, gene$sc.sc4.no80)
plotMA(dds$sc.sc4.no80)
plotMA(dds$sc.sc4.noPi)
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=0)
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
tmp = compList(all.80, gene$sc.sc4.noPi)
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=700) )
gene <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=700)
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
View(sc.info)
Xu.28
xu.genes
tmp = compList(xu.genes, intersect(all.80, gene$sc.sc4.noPi))
tmp = compList(xu.genes, intersect(sgdToName[all.80], gene$sc.sc4.noPi))
tmp = compList(Xu.genes, intersect(all.80, gene$sc.sc4.noPi))
tmp = compList(Xu.genes, gene$sc.sc4.noPi)
tmp = compList(Xu.genes, gene$sc.sc4.80)
tmp = compList(Xu.genes, gene$sc.sc4.no80)
gene$sc.sc4.no80
intersect(xu.genes, sgdToName[gene$sc.sc4.noPi])
length(gene$sc.sc4.noPi)
setdiff(xu.genes, sgdToName[gene$sc.sc4.noPi])
nameToSgd["SPL2"]
res$sc.sc4.noPi["YHR136C",]
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
gene <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
setdiff(xu.genes, sgdToName[gene$sc.sc4.noPi])
nameToSgd["VIP1"]
res$sc.sc4.noPi["YLR410W",]
2^.476
res$sc.sc4.no80["YLR410W",]
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
?plotMA
plotMA( dds$sc.sc4.no80, pvalCutoff=.05, main="pho80 bg");abline(v=100,h=1,lty=2)
plotMA( dds$sc.sc4.noPi, pvalCutoff=.05, main="Pi starve");abline(v=100,h=1,lty=2)
View(sc.info)
pick <- res[[1]]$padj < 0.1 & res[[2]]$padj < 0.1
sum(pick)
sum(pick,na.rm=T)
sum(is.na(pick))
length(pick)
sum(is.na(res[[1]]$pvalue))
sum(is.na(res[[1]]$padj))
res[[1]][is.na(res[[1]]$padj)),][1:20,]
res[[1]][is.na(res[[1]]$padj),][1:20,]
res[[1]][is.na(res[[1]]$pvalue),][1:20,]
sum(res[[1]]$baseMean==0)
summary(pick)
pick[is.na(pick)] <- FALSE
summary(pick)
cor(res[[1]]$padj[pick], res[[2]]$padj[pick])
plot(res[[1]]$padj[pick], res[[2]]$padj[pick])
