head(res[[1]][order(res[[1]]),])
res[[1]]
head(res[[1]][order(res[[1]]$padj),])
res <- list( sc.sc4.no80 = results(dds[[1]]) ); res[[1]] <- res[[1]] [ order(res[[1]]$padj), ]
res[[1]]
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
res$sc.sc4.noPi <- results(dds[[2]])
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
plotMA( dds[[1]] )
res[1][1:20,]
res$sc.sc4.no80[1:20,]
res$sc.sc4.no80["YML123C",]
res$sc.sc4.noPi <- results(dds[[2]]); res[[2]] <- res[[2]] [ order(res[[2]]$padj), ]
res$sc.sc4.noPi["YML123C",]
View(sc.info)
sc.sense["YML123C",c("A1","A2","X1","X2")]
sc.sense["YML123C",c("A1","A2","X1","X2","B1","B2")]
sc.sense["YML123C",c("A1","A2","X1","X2","X3","X4")]
sum(sig[[1]])
sum(sig[[2]])
sum(sig$sc.sc4.no80)
plotMA(sig$sc.sc4.no80,main="No pho80")
plotMA(sig$sc.sc4.no80,title="no pho80")
plotMA(dds$sc.sc4.no80,main="No pho80")
plotMA(dds$sc.sc4.noPi,main="No Pi")
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
print( addmargins(comp[[1]]) ) # print overlaps
dds <- list( sc.sc4.no80 = PairwiseDE2( sc.sense, sc.info$Genotype, "wt.highPi", "pho80" ) )
res <- list( sc.sc4.no80 = results(dds[[1]]) ); res[[1]] <- res[[1]] [ order(res[[1]]$padj), ]
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
dds$sc.sc4.noPi <- PairwiseDE2( sc.sense, sc.info$Genotype, "wt.highPi", "wt.lowPi")
res$sc.sc4.noPi <- results(dds[[2]]); res[[2]] <- res[[2]] [ order(res[[2]]$padj), ]
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
gene.list <- list( sc.no80_noPi = sgdToName[ sc.genes[ sig$sc.sc4.noPi & sig$sc.sc4.no80 ] ],
sc.noPi_Xu80 = sgdToName[ intersect(all.80, sc.genes[sig$sc.sc4.noPi]) ] )
?as.character
?sapply
sapply(gene.list, as.character)
sum(intersect(all.80, sc.genes[sig$sc.sc4.noPi]))
summary(intersect(all.80, sc.genes[sig$sc.sc4.noPi]))
length(intersect(all.80, sc.genes[sig$sc.sc4.noPi]))
intersect(all.80, sc.genes[sig$sc.sc4.noPi])
sig$sc.sc4.noPi["YML123C",]
class(sig[[2]])
names(attributes(sig[[1]]))
res[[2]]["YML123C",]
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
attributes(sig[[2]])
tmp = sigGene(res[[2]],baseMean=100)
names(attributes(tmp))
sum(tmp)
"YML123C" %in% sc.genes[tmp]
debug(sigGene)
tmp = sigGene(res[[2]],baseMean=100)
fdr
res["YML123C",]
log2FoldChange
which(rownames(res)=="YML123C")
res[3,]
Q
res <- list( sc.sc4.no80 = results(dds[[1]]) )
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
res$sc.sc4.noPi <- results(dds[[2]])
Q
undebug(sigGene)
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
res$sc.sc4.noPi <- results(dds[[2]])
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
gene.list <- list( sc.no80_noPi = sgdToName[ sc.genes[ sig$sc.sc4.noPi & sig$sc.sc4.no80 ] ],
sc.noPi_Xu80 = sgdToName[ intersect(all.80, sc.genes[sig$sc.sc4.noPi]) ] )
cat( "Genes defined by Xu and found in starvation conditions ...")
sapply(gene.list, as.character)
?merge
as.data.frame(LETTERS[1:10])
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both","A only","B only"), len, sep=":", collapse=" "))
return(res)
}
tmp <- compList( sgdToName[sc.genes[sig[[2]]]], sgdToName[sc.genes[sig[[2]]]])
tmp <- compList( sgdToName[sc.genes[sig[[2]]]], sgdToName[sc.genes[sig[[1]]]])
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both","A only","B only"), len, sep=":", collapse="\n"))
return(res)
}
compList <- function(listA, listB){
}
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both","A only","B only"), len, sep=":", collapse="\n"))
return(res)
}
tmp <- compList( sgdToName[sc.genes[sig[[2]]]], sgdToName[sc.genes[sig[[1]]]])
compList <- function(listA, listB){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
return(res)
}
tmp
sort(tmp[1])
sort(tmp[[1]])
intersect(sgdToName[all.80], tmp[[2]])
intersect(sgdToName[all.80], tmp[[3]])
gene <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ] )
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
genelist <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
genelist$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
tmp = compList(gene[[1]],gene[[2]])
install.packages("vennDiagram")
install.packages("VennDiagram")
require(VennDiagram)
help(package="VennDiagram")
library(help="VennDiagram")
?venn.diagram
?draw.pairwise.venn
?intersect
tmp = compList(all.80, gene$sc.sc4.noPi)
tmp = compList(all.80, gene$sc.sc4.no80)
plotMA(dds$sc.sc4.no80)
plotMA(dds$sc.sc4.noPi)
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=0)
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
tmp = compList(all.80, gene$sc.sc4.noPi)
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=700) )
gene <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=700)
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
View(sc.info)
Xu.28
xu.genes
tmp = compList(xu.genes, intersect(all.80, gene$sc.sc4.noPi))
tmp = compList(xu.genes, intersect(sgdToName[all.80], gene$sc.sc4.noPi))
tmp = compList(Xu.genes, intersect(all.80, gene$sc.sc4.noPi))
tmp = compList(Xu.genes, gene$sc.sc4.noPi)
tmp = compList(Xu.genes, gene$sc.sc4.80)
tmp = compList(Xu.genes, gene$sc.sc4.no80)
gene$sc.sc4.no80
intersect(xu.genes, sgdToName[gene$sc.sc4.noPi])
length(gene$sc.sc4.noPi)
setdiff(xu.genes, sgdToName[gene$sc.sc4.noPi])
nameToSgd["SPL2"]
res$sc.sc4.noPi["YHR136C",]
sig <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,baseMean=100) )
gene <- list( sc.sc4.no80 = sc.genes[ sig$sc.sc4.no80 ] )
sig$sc.sc4.noPi <- sigGene(res[[2]], baseMean=100)
gene$sc.sc4.noPi = sc.genes[ sig$sc.sc4.noPi ]
setdiff(xu.genes, sgdToName[gene$sc.sc4.noPi])
nameToSgd["VIP1"]
res$sc.sc4.noPi["YLR410W",]
2^.476
res$sc.sc4.no80["YLR410W",]
comp <- list( sc.sc4.no80_noPi = table( "pho80"=sig[[1]], "noPi"=sig[[2]] ) )
cat("Compare pho80- and Pi starvation genes")
print( addmargins(comp[[1]]) ) # print overlaps
?plotMA
plotMA( dds$sc.sc4.no80, pvalCutoff=.05, main="pho80 bg");abline(v=100,h=1,lty=2)
plotMA( dds$sc.sc4.noPi, pvalCutoff=.05, main="Pi starve");abline(v=100,h=1,lty=2)
View(sc.info)
pick <- res[[1]]$padj < 0.1 & res[[2]]$padj < 0.1
sum(pick)
sum(pick,na.rm=T)
sum(is.na(pick))
length(pick)
sum(is.na(res[[1]]$pvalue))
sum(is.na(res[[1]]$padj))
res[[1]][is.na(res[[1]]$padj)),][1:20,]
res[[1]][is.na(res[[1]]$padj),][1:20,]
res[[1]][is.na(res[[1]]$pvalue),][1:20,]
sum(res[[1]]$baseMean==0)
summary(pick)
pick[is.na(pick)] <- FALSE
summary(pick)
cor(res[[1]]$padj[pick], res[[2]]$padj[pick])
plot(res[[1]]$padj[pick], res[[2]]$padj[pick])
search()
library(DESeq2)
search()
library(limma)
source("http://bioconductor.org/biocLite.R")
biocLite("limma")
biocLite()
library(help="limma")
vignette("limma")
vignette(limma)
?vennCounts
require(limma)
plotMA
search()
detach("DESeq2")
detach("package:DESeq2")
search()
require("DESeq2")
search()
plotMA
plotMA(dds[[1]])
?plotMA
?vennCounts
gene.list <- matrix(NA, nrow=length(sc.genes), ncol=2)
gene.list <- cbind( sig$sc.sc4.no80, sig$sc.sc4.noPi )
View(gene.list)
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("pho80", "no Pi")
gene.list <- cbind( sig$sc.sc4.no80, sig$sc.sc4.noPi, "FALSE", "FALSE" )
gene.list <- cbind( sig$sc.sc4.no80, sig$sc.sc4.noPi, "FALSE" )
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("pho80", "no Pi", "Xu no Pi")
gene.list[ all.80, 3 ] <- TRUE
sum(gene.list[,3])
View(gene.list)
gene.list[1:10,3]
sum(gene.list[,3])
gene.list <- cbind( sig$sc.sc4.no80, sig$sc.sc4.noPi, FALSE )
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("pho80", "no Pi", "Xu no Pi")
gene.list[ all.80, 3 ] <- TRUE
sum(gene.list[,3])
vennCounts
vennCounts <- vennCounts(gene.list, include="up")
fix(vennCounts)
vennDiagram( vennCounts )
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("pho80", "no Pi", "Xu no Pi")
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("new pho80", "new no Pi", "Xu no Pi")
gene.list[ all.80, 3 ] <- TRUE
vennCounts <- vennCounts(gene.list, include="up")
vennDiagram( vennCounts, circle.col=c("black","blue","gold") )
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
vennCounts
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("new pho80", "new no Pi", "Xu no Pi")
gene.list[ xu.genes, 3 ] <- TRUE
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("new pho80", "new no Pi", "Xu no Pi")
gene.list[ Xu.genes, 3 ] <- TRUE
vennCounts <- vennCounts(gene.list, include="up")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
Xu.genes
gene.list <- cbind( sig$sc.sc4.no80, sig$sc.sc4.noPi, FALSE )
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("new pho80", "new no Pi", "Xu no Pi")
gene.list[ Xu.genes, 3 ] <- TRUE
vennCounts <- vennCounts(gene.list, include="up")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("new pho80", "new no Pi", "Xu Pho4-genes")
gene.list[ Xu.genes, 3 ] <- TRUE
vennCounts <- vennCounts(gene.list, include="up")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("pho80", "no Pi", "Xu Pho4-genes")
gene.list[ Xu.genes, 3 ] <- TRUE
vennCounts <- vennCounts(gene.list, include="up")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
vennCounts
barplot(vennCounts[2:8,4])
barplot(vennCounts[2:8,4],names.arg=paste(vennCounts[2:8,1:3],sep=""))
paste(vennCounts[2:8,1:3],sep="")
paste(vennCounts[2:8,1:3],collapse="")
vennCounts[2:8,1:3]
apply(vennCounts[2:8,1:3],1,paste,sep="")
apply(vennCounts[2:8,1:3],1,paste,col="")
apply(vennCounts[2:8,1:3],1,function(x) paste(x, sep=""))
apply(vennCounts[2:8,1:3],1,print)
class(vennCounts[,1])
paste(vennCounts[,1])
vennCounts[1,]
vennCounts[1,1:3]
class(vennCounts[1,1:3])
paste(vennCounts[1,1:3],col="")
paste(vennCounts[1,1:3],collapse="")
apply(vennCounts[2:8,1:3],1,paste, collapse="")
barplot(vennCounts[2:8,4],names.arg=apply(vennCounts[2:8,1:3],1,paste,collapse=""))
barplot(vennCounts[2:8,4],names.arg=apply(vennCounts[2:8,1:3],1,paste,collapse=""),xlab="pho80/no Pi/Xu Pho4 genes")
barplot(vennCounts[2:8,4],names.arg=apply(vennCounts[2:8,1:3],1,paste,collapse=""),xlab="pho80/no Pi/Xu Pho4")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
comp[[1]]
addmargins(comp[[1]])
phyper( 61, 239, 6364, 114, lower.tail=FALSE)
114*239/6603
61/(114*239/6603)
tmp = list(common=LETTERS[1:10],A=LETTERS[11:12])
tmp
sapply(tmp, length)
print(sapply(tmp, length))
compList <- function(listA, listB, total=0){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
if( total ) { # if total # of genes is given, calculate the enrichment factor and p-value from hypergeometric dist.
expect <- length(listB) / total * listA
enrich <- round( len["common"] / expect, 1 )
p.hypergeom <- phyper( x=len["common"], m=length(listB), n=total-length(listB), k=length(listA), lower.tail=F)
cat(paste(c("Enrichment factor:","p<"),c(enrich,p.hypergeom),sep="",collapse="\n"))
}
return(res)
}
compList(gene.list[[1]],gene.list[[2]],6603)
gene.list[[1]]
gene[[1]]
compList(gene[[1]],gene[[2]],6603)
compList <- function(listA, listB, total=0){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
if( total ) { # if total # of genes is given, calculate the enrichment factor and p-value from hypergeometric dist.
expect <- length(listB) / total * length(listA)
enrich <- round( len["common"] / expect, 1 )
p.hypergeom <- phyper( x=len["common"], m=length(listB), n=total-length(listB), k=length(listA), lower.tail=F)
cat(paste(c("Enrichment factor:","p<"),c(enrich,p.hypergeom),sep="",collapse="\n"))
}
return(res)
}
compList(gene[[1]],gene[[2]],6603)
debug(compList)
compList(gene[[1]],gene[[2]],6603)
len
len["common"]
expect
enrich
len["common"]
length(listB)
compList <- function(listA, listB, total=0){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
if( total ) { # if total # of genes is given, calculate the enrichment factor and p-value from hypergeometric dist.
expect <- length(listB) / total * length(listA)
enrich <- round( len["common"] / expect, 1 )
p.hypergeom <- phyper( q=len["common"], m=length(listB), n=total-length(listB), k=length(listA), lower.tail=F)
cat(paste(c("Enrichment factor:","p<"),c(enrich,p.hypergeom),sep="",collapse="\n"))
}
return(res)
}
compList(gene[[1]],gene[[2]],6603)
compList(gene[[1]],gene[[2]],6603)->tmp
round(1,2,3)
compList <- function(listA, listB, total=0){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
if( total ) { # if total # of genes is given, calculate the enrichment factor and p-value from hypergeometric dist.
expect <- length(listB) / total * length(listA)
enrich <- round( len["common"] / expect, 1 )
p.hypergeom <- round( phyper(q=len["common"],m=length(listB),n=total-length(listB),k=length(listA),lower.tail=F),1)
cat("\n\n")
cat(paste(c("Enrichment factor:","p<"),c(enrich,p.hypergeom),sep="",collapse="\n"))
}
return(res)
}
compList(gene[[1]],gene[[2]],6603)->tmp
sprintf("%g",   1e6 * pi) # -> exponential
sprintf("%.9g", 1e6 * pi) # -> "fixed"
sprintf("%.2g",1e-6 * pi)
sprintf("%.4g",1e-6 * pi)
sprintf("%.4f",1e-6 * pi)
sprintf( "Enrichment factor: %.1f \n p<%.2g", 14.88, 1.53432e-60 )
sprintf( "Enrichment factor: %.1f \\n p<%.2g", 14.88, 1.53432e-60 )
sprintf( "Enrichment factor: %.1f \r p<%.2g", 14.88, 1.53432e-60 )
cat( sprintf( "Enrichment factor: %.1f  p<%.2g", 14.88, 1.53432e-60 ) )
cat( sprintf( "Enrichment factor: %.1f\n p<%.2g", 14.88, 1.53432e-60 ) )
cat( sprintf( "Enrichment factor: %.1f\np<%.2g", 14.88, 1.53432e-60 ) )
cat( sprintf( "Enrichment factor: %.1f\n               p<%.2g", 14.88, 1.53432e-60 ) )
cat( sprintf( "Enrichment factor: %.1f\np< %.2g", 14.88, 1.53432e-60 ) )
compList <- function(listA, listB, total=0){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
if( total ) { # if total # of genes is given, calculate the enrichment factor and p-value from hypergeometric dist.
expect <- length(listB) / total * length(listA)
enrich <- round( len["common"] / expect, 1 )
p.hypergeom <- round( phyper(q=len["common"],m=length(listB),n=total-length(listB),k=length(listA),lower.tail=F),1)
cat("\n\n")
cat( sprintf( "Enrichment factor: %.1f\np< %.2g", 14.88, 1.53432e-60 ) )
}
return(res)
}
compList(gene[[1]],gene[[2]],6603)->tmp
compList(gene[[1]],all.80,6603)->tmp
compList(gene[[1]],NULL,6603)->tmp
compList <- function(listA, listB, total=0){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
if( total ) { # if total # of genes is given, calculate the enrichment factor and p-value from hypergeometric dist.
expect <- length(listB) / total * length(listA)
enrich <- round( len["common"] / expect, 1 )
p.hypergeom <- round( phyper(q=len["common"],m=length(listB),n=total-length(listB),k=length(listA),lower.tail=F),1)
cat("\n\n")
cat( sprintf( "Enrichment factor: %.1f\np< %.2g", enrich, p.hypergeom ) )
}
return(res)
}
compList(gene[[1]],NULL,6603)->tmp
compList(gene[[1]],all.80,6603)->tmp
# Function for calculating DE genes given the data, design
PairwiseDE <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))) )
cds <- newCountDataSet( subTable, conditions )
cds <- estimateSizeFactors( cds )
cds <- estimateDispersions( cds )
res = nbinomTest( cds, cond.A, cond.B )
res1 <- res[ !is.na(res$padj), ]
return( res )
}
# Function to report significant genes at a given fdr and log2FoldChange threshold
sigGene <- function( res, fdr=0.05, log2FoldChange=1, direction="up", baseMean=0 ) {
par <- paste("sigGene --fdr=", fdr, " --foldchange=", 2^log2FoldChange, " --direction=", direction, " --baseMean=",baseMean, sep="", collapse="")
if( direction != "up" & direction != "down" ){
list = rep(FALSE, nrow(res))
}
else if( direction == "up"){
list = res$padj < fdr & res$log2FoldChange > log2FoldChange & res$baseMean > baseMean
}
else if( direction == "down"){
list = res$padj < fdr & res$log2FoldChange < -log2FoldChange & res$baseMean > baseMean
}
list = replace(list, is.na(list), FALSE)
attr(list, "par") <- par
cat( par )
return( list )
}
# Use DESeq2 to call significantly DE genes
PairwiseDE2 <- function( countTable, design, cond.A, cond.B ){
index.A <- which( design==cond.A )
index.B <- which( design==cond.B )
subTable <- countTable[, c(index.A,index.B)]
conditions <- factor( c(rep(cond.A,length(index.A)), rep(cond.B, length(index.B))), levels=c(cond.A,cond.B) )
colData <- DataFrame( condition = conditions )
dds <- DESeqDataSetFromMatrix( countData = subTable, colData = colData, design = ~condition)
dds <- DESeq( dds )
return( dds )
}
# Compare two lists
compList <- function(listA, listB, total=0){
res <- list(common = intersect(listA, listB), A.only = setdiff(listA, listB), B.only = setdiff(listB, listA))
len <- sapply(res, length)
cat(paste(c("In both"," A only"," B only"), len, sep=":", collapse="\n"))
if( total ) { # if total # of genes is given, calculate the enrichment factor and p-value from hypergeometric dist.
expect <- length(listB) / total * length(listA)
enrich <- round( len["common"] / expect, 1 )
p.hypergeom <- phyper(q=len["common"],m=length(listB),n=total-length(listB),k=length(listA),lower.tail=F)
cat("\n\n")
cat( sprintf( "Enrichment factor: %.1f\np< %.2g", enrich, p.hypergeom ) )
}
return(res)
}
compList(gene[[1]],gene[[2]],6603)->tmp
compList(gene[[1]],all.80,6603)->tmp
compList(gene[[2]],all.80,6603)->tmp
sigd <- list( sc.sc4.no80 = sigGene(res$sc.sc4.no80,direction="down",baseMean=100) )
sigd$sc.sc4.noPi <- sigGene(res[[2]], direction="down", baseMean=100)
gene.list <- cbind( sig$sc.sc4.no80-sigd$sc.sc4.no80, sig$sc.sc4.noPi-sigd$sc.sc4.noPi, FALSE )
View(gene.list)
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("pho80", "no Pi", "Xu Pho4-genes")
gene.list[ Xu.genes, 3 ] <- TRUE
vennCounts <- vennCounts(gene.list, include="up")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
vennCounts <- vennCounts(gene.list, include="both")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
vennCounts
View(gene.list)
?vennCounts
example(vennCounts)
results
design
a
class(a)
vennDiagram(vennCounts, include=c("up","down"))
vennDiagram(a, include=c("up","down"))
vennCounts(results, include="both")
vennCounts(results, include=c("up","down"))
vennCounts(results)
vennDiagram
gene.list <- cbind( sig$sc.sc4.no80, sig$sc.sc4.noPi, FALSE )
rownames(gene.list) <- sc.genes; colnames(gene.list) <- c("pho80", "no Pi", "Xu Pho4-genes")
gene.list[ Xu.genes, 3 ] <- TRUE
vennCounts <- vennCounts(gene.list, include="both")
vennDiagram( vennCounts, circle.col=c("black","blue","green") )
compList( gene$sc.sc4.no80, gene$sc.sc4.noPi )
tmp <- compList( gene$sc.sc4.no80, gene$sc.sc4.noPi )
tmp <- compList( gene$sc.sc4.no80, gene$sc.sc4.noPi, 6603 )
which(gene.list[,3] & !gene.list[,1] & !gene.list[,2])
names(which(gene.list[,3] & !gene.list[,1] & !gene.list[,2]))
nameToSgd[names(which(gene.list[,3] & !gene.list[,1] & !gene.list[,2]))]
sgdToName[names(which(gene.list[,3] & !gene.list[,1] & !gene.list[,2]))]
comp[[1]]
addmargins(comp[[1]])
?vennDiagram
?par
plotMA( dds$sc.sc4.no80, pvalCutoff=.05, main="pho80 bg");abline(v=100,h=1,lty=2)
plotMA( dds$sc.sc4.noPi, pvalCutoff=.05, main="Pi starve");abline(v=100,h=1,lty=2)
?import
?require
detach("package:limma")
search()
limma::vennCounts
